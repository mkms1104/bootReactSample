{"version":3,"sources":["../../src/ts/rendering/row/rowDragComp.ts"],"names":[],"mappings":"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","file":"rowDragComp.js","sourcesContent":["import { Component } from \"../../widgets/component\";\nimport { PostConstruct } from \"../../context/context\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { DragItem, DragSource, DragSourceType } from \"../../dragAndDrop/dragAndDropService\";\nimport { Events } from \"../../eventKeys\";\nimport { Beans } from \"../beans\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Column } from \"../../entities/column\";\nimport { createIconNoSpan } from \"../../utils/icon\";\nimport { doOnce, isFunction } from \"../../utils/function\";\n\nexport interface IRowDragItem extends DragItem {\n    defaultTextValue: string;\n}\n\nexport class RowDragComp extends Component {\n\n    constructor(\n        private readonly rowNode: RowNode,\n        private readonly column: Column,\n        private readonly cellValueFn: () => string,\n        private readonly beans: Beans\n    ) {\n        super(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" aria-hidden=\"true\"></div>`);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const eGui = this.getGui();\n\n        eGui.appendChild(createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null));\n        this.addDragSource();\n\n        this.checkCompatibility();\n\n        const strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ?\n            new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) :\n            new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);\n\n        this.createManagedBean(strategy, this.beans.context);\n    }\n\n    private getSelectedCount(): number {\n        const multiRowEnabled = this.beans.gridOptionsWrapper.isEnableMultiRowDragging();\n        if (!multiRowEnabled) { return 1; }\n\n        const selection = this.beans.selectionController.getSelectedNodes();\n\n        return selection.indexOf(this.rowNode) !== -1 ? selection.length : 1;\n    }\n\n    // returns true if all compatibility items work out\n    private checkCompatibility(): void {\n        const managed = this.beans.gridOptionsWrapper.isRowDragManaged();\n        const treeData = this.beans.gridOptionsWrapper.isTreeData();\n\n        if (treeData && managed) {\n            doOnce(() =>\n                console.warn('ag-Grid: If using row drag with tree data, you cannot have rowDragManaged=true'),\n                'RowDragComp.managedAndTreeData'\n            );\n        }\n    }\n\n    private addDragSource(): void {\n        const dragItem: IRowDragItem = {\n            rowNode: this.rowNode,\n            columns: [this.column],\n            defaultTextValue: this.cellValueFn(),\n        };\n\n        const rowDragText = this.column.getColDef().rowDragText;\n\n        const dragSource: DragSource = {\n            type: DragSourceType.RowDrag,\n            eElement: this.getGui(),\n            dragItemName: () => {\n                const dragItemCount = this.getSelectedCount();\n                if (rowDragText) {\n                    return rowDragText(dragItem, dragItemCount);\n                }\n\n                return dragItemCount === 1 ? this.cellValueFn() : `${dragItemCount} rows`;\n            },\n            getDragItem: () => dragItem,\n            dragStartPixels: 0,\n            dragSourceDomDataKey: this.beans.gridOptionsWrapper.getDomDataKey()\n        };\n\n        this.beans.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.beans.dragAndDropService.removeDragSource(dragSource));\n    }\n}\n\nclass VisibilityStrategy extends BeanStub {\n    private readonly parent: RowDragComp;\n    private readonly column: Column;\n    protected readonly rowNode: RowNode;\n\n    constructor(parent: RowDragComp, rowNode: RowNode, column: Column) {\n        super();\n        this.parent = parent;\n        this.column = column;\n        this.rowNode = rowNode;\n    }\n\n    protected setDisplayedOrVisible(neverDisplayed: boolean): void {\n        if (neverDisplayed) {\n            this.parent.setDisplayed(false);\n        } else {\n            const shown = this.column.isRowDrag(this.rowNode);\n            const isShownSometimes = isFunction(this.column.getColDef().rowDrag);\n\n            // if shown sometimes, them some rows can have drag handle while other don't,\n            // so we use setVisible to keep the handles horizontally aligned (as setVisible\n            // keeps the empty space, whereas setDisplayed looses the space)\n            if (isShownSometimes) {\n                this.parent.setDisplayed(true);\n                this.parent.setVisible(shown);\n            } else {\n                this.parent.setDisplayed(shown);\n            }\n        }\n    }\n}\n\n// when non managed, the visibility depends on suppressRowDrag property only\nclass NonManagedVisibilityStrategy extends VisibilityStrategy {\n    private readonly beans: Beans;\n\n    constructor(parent: RowDragComp, beans: Beans, rowNode: RowNode, column: Column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n\n// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property\nclass ManagedVisibilityStrategy extends VisibilityStrategy {\n\n    private readonly beans: Beans;\n\n    constructor(parent: RowDragComp, beans: Beans, rowNode: RowNode, column: Column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        // we do not show the component if sort, filter or grouping is active\n\n        this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n\n        this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const rowDragFeature = this.beans.gridPanel.getRowDragFeature();\n        const shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();\n        const suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n        const hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();\n        const neverDisplayed = (shouldPreventRowMove && !hasExternalDropZones) || suppressRowDrag;\n\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n"]}