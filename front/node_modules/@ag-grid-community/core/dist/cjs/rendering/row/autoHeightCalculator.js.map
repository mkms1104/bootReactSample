{"version":3,"sources":["../../src/ts/rendering/row/autoHeightCalculator.ts"],"names":[],"mappings":"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","file":"autoHeightCalculator.js","sourcesContent":["import { GridPanel } from \"../../gridPanel/gridPanel\";\nimport { Autowired, Bean } from \"../../context/context\";\nimport { Beans } from \"../beans\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { CellComp } from \"../cellComp\";\nimport { ColumnController } from \"../../columnController/columnController\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { addCssClass } from \"../../utils/dom\";\nimport {RowCssClassCalculator} from \"./rowCssClassCalculator\";\nimport {PaginationProxy} from \"../../pagination/paginationProxy\";\nimport {AngularRowUtils} from \"./angularRowUtils\";\nimport {GridOptionsWrapper} from \"../../gridOptionsWrapper\";\n\n@Bean('autoHeightCalculator')\nexport class AutoHeightCalculator extends BeanStub {\n\n    @Autowired('beans') private beans: Beans;\n    @Autowired(\"$scope\") private $scope: any;\n    @Autowired(\"columnController\") private columnController: ColumnController;\n    @Autowired(\"rowCssClassCalculator\") private rowCssClassCalculator: RowCssClassCalculator;\n    @Autowired('$compile') public $compile: any;\n\n    private gridPanel: GridPanel;\n\n    public registerGridComp(gridPanel: GridPanel): void {\n        this.gridPanel = gridPanel;\n    }\n\n    public getPreferredHeightForRow(rowNode: RowNode): number {\n\n        const eDummyContainer = document.createElement('div');\n        this.addInRowCssClasses(rowNode, eDummyContainer);\n\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        const eBodyContainer = this.gridPanel.getCenterContainer();\n        eBodyContainer.appendChild(eDummyContainer);\n\n        const scopeResult = AngularRowUtils.createChildScopeOrNull(rowNode, this.$scope, this.beans.gridOptionsWrapper);\n        const scope = scopeResult ? scopeResult.scope : undefined;\n        const scopeDestroyFunc = scopeResult ? scopeResult.scopeDestroyFunc : undefined;\n\n        const cellComps: CellComp[] = [];\n        const autoRowHeightCols = this.columnController.getAllAutoRowHeightCols();\n        const displayedCols = this.columnController.getAllDisplayedColumns();\n        const visibleAutoRowHeightCols = autoRowHeightCols.filter(col => displayedCols.indexOf(col) >= 0);\n\n        visibleAutoRowHeightCols.forEach(col => {\n            const cellComp = new CellComp(\n                scope,\n                this.beans,\n                col,\n                rowNode,\n                null,\n                true,\n                false\n            );\n            cellComp.setParentRow(eDummyContainer);\n            cellComps.push(cellComp);\n        });\n\n        const template = cellComps.map(cellComp => cellComp.getCreateTemplate()).join(' ');\n        eDummyContainer.innerHTML = template;\n\n        // this gets any cellComps that are using components to put the components in\n        cellComps.forEach(cellComp => cellComp.afterAttached());\n\n        if (scope) {\n            this.$compile(eDummyContainer)(scope);\n        }\n\n        // we should be able to just take the height of the row at this point, however\n        // the row isn't expanding to cover the cell heights, i don't know why, i couldn't\n        // figure it out so instead looking at the individual cells instead\n        let maxCellHeight = 0;\n        for (let i = 0; i < eDummyContainer.children.length; i++) {\n            const child = eDummyContainer.children[i] as HTMLElement;\n            if (child.offsetHeight > maxCellHeight) {\n                maxCellHeight = child.offsetHeight;\n            }\n        }\n\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(eDummyContainer);\n\n        cellComps.forEach(cellComp => {\n            // dunno why we need to detach first, doing it here to be consistent with code in RowComp\n            cellComp.detach();\n            cellComp.destroy();\n        });\n\n        if (scopeDestroyFunc) {\n            scopeDestroyFunc();\n        }\n\n        return maxCellHeight;\n    }\n\n    private addInRowCssClasses(rowNode: RowNode, eDummyContainer: HTMLDivElement) {\n        // so any styles on row also get applied in dummy, otherwise\n        // the content in dummy may differ to the real\n        const rowIndex = rowNode.rowIndex;\n        const params = {\n            rowNode: rowNode,\n            rowIsEven: rowIndex % 2 === 0,\n            rowLevel: this.rowCssClassCalculator.calculateRowLevel(rowNode),\n            firstRowOnPage: rowIndex === this.beans.paginationProxy.getPageFirstRow(),\n            lastRowOnPage: rowIndex === this.beans.paginationProxy.getPageLastRow(),\n            printLayout: false,\n            expandable: rowNode.isExpandable()\n        };\n        const classes = this.rowCssClassCalculator.getInitialRowClasses(params);\n        addCssClass(eDummyContainer, classes.join(' '));\n    }\n}\n"]}