{"version":3,"sources":["../../src/ts/components/componentUtil.ts"],"names":[],"mappings":"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","file":"componentUtil.js","sourcesContent":["import { GridOptions } from '../entities/gridOptions';\nimport { GridApi } from '../gridApi';\nimport { ComponentStateChangedEvent, Events } from '../events';\nimport { PropertyKeys } from '../propertyKeys';\nimport { ColumnApi } from '../columnController/columnApi';\nimport { iterateObject } from '../utils/object';\nimport { values } from '../utils/generic';\n\nexport class ComponentUtil {\n    // all the events are populated in here AFTER this class (at the bottom of the file).\n    public static EVENTS: string[] = [];\n\n    // function below fills this with onXXX methods, based on the above events\n    private static EVENT_CALLBACKS: string[];\n\n    public static STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;\n    public static OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;\n    public static ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;\n    public static NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;\n    public static BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;\n    public static FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;\n    public static ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;\n\n    public static getEventCallbacks(): string[] {\n        if (!ComponentUtil.EVENT_CALLBACKS) {\n            ComponentUtil.EVENT_CALLBACKS = ComponentUtil.EVENTS.map(event => ComponentUtil.getCallbackForEvent(event));\n        }\n\n        return ComponentUtil.EVENT_CALLBACKS;\n    }\n\n    public static copyAttributesToGridOptions(gridOptions: GridOptions, component: any, skipEventDeprecationCheck: boolean = false): GridOptions {\n\n        // create empty grid options if none were passed\n        if (typeof gridOptions !== 'object') {\n            gridOptions = {} as GridOptions;\n        }\n\n        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'\n        const pGridOptions = gridOptions as any;\n        const keyExists = (key: string) => typeof component[key] !== 'undefined';\n\n        // add in all the simple properties\n        [\n            ...ComponentUtil.ARRAY_PROPERTIES,\n            ...ComponentUtil.STRING_PROPERTIES,\n            ...ComponentUtil.OBJECT_PROPERTIES,\n            ...ComponentUtil.FUNCTION_PROPERTIES,\n            ...ComponentUtil.getEventCallbacks(),\n        ]\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = component[key]);\n\n        ComponentUtil.BOOLEAN_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toBoolean(component[key]));\n\n        ComponentUtil.NUMBER_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toNumber(component[key]));\n\n        return gridOptions;\n    }\n\n    public static getCallbackForEvent(eventName: string): string {\n        if (!eventName || eventName.length < 2) {\n            return eventName;\n        } else {\n            return 'on' + eventName[0].toUpperCase() + eventName.substr(1);\n        }\n    }\n\n    public static processOnChange(changes: any, gridOptions: GridOptions, api: GridApi, columnApi: ColumnApi): void {\n        if (!changes) {\n            return;\n        }\n\n        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'\n        const pGridOptions = gridOptions as any;\n        const keyExists = (key: string) => changes[key];\n\n        // check if any change for the simple types, and if so, then just copy in the new value\n        [\n            ...ComponentUtil.ARRAY_PROPERTIES,\n            ...ComponentUtil.OBJECT_PROPERTIES,\n            ...ComponentUtil.STRING_PROPERTIES,\n            ...ComponentUtil.getEventCallbacks(),\n        ]\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = changes[key].currentValue);\n\n        ComponentUtil.BOOLEAN_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toBoolean(changes[key].currentValue));\n\n        ComponentUtil.NUMBER_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toNumber(changes[key].currentValue));\n\n        if (changes.enableCellTextSelection) {\n            api.setEnableCellTextSelection(ComponentUtil.toBoolean(changes.enableCellTextSelection.currentValue));\n        }\n\n        if (changes.quickFilterText) {\n            api.setQuickFilter(changes.quickFilterText.currentValue);\n        }\n\n        if (changes.rowData) {\n            api.setRowData(changes.rowData.currentValue);\n        }\n\n        if (changes.pinnedTopRowData) {\n            api.setPinnedTopRowData(changes.pinnedTopRowData.currentValue);\n        }\n\n        if (changes.pinnedBottomRowData) {\n            api.setPinnedBottomRowData(changes.pinnedBottomRowData.currentValue);\n        }\n\n        if (changes.autoGroupColumnDef) {\n            api.setAutoGroupColumnDef(changes.autoGroupColumnDef.currentValue, \"gridOptionsChanged\");\n        }\n\n        if (changes.columnDefs) {\n            api.setColumnDefs(changes.columnDefs.currentValue, \"gridOptionsChanged\");\n        }\n\n        if (changes.datasource) {\n            api.setDatasource(changes.datasource.currentValue);\n        }\n\n        if (changes.headerHeight) {\n            api.setHeaderHeight(ComponentUtil.toNumber(changes.headerHeight.currentValue));\n        }\n\n        if (changes.paginationPageSize) {\n            api.paginationSetPageSize(ComponentUtil.toNumber(changes.paginationPageSize.currentValue));\n        }\n\n        if (changes.pivotMode) {\n            columnApi.setPivotMode(ComponentUtil.toBoolean(changes.pivotMode.currentValue));\n        }\n\n        if (changes.groupRemoveSingleChildren) {\n            api.setGroupRemoveSingleChildren(ComponentUtil.toBoolean(changes.groupRemoveSingleChildren.currentValue));\n        }\n\n        if (changes.suppressRowDrag) {\n            api.setSuppressRowDrag(ComponentUtil.toBoolean(changes.suppressRowDrag.currentValue));\n        }\n\n        if (changes.suppressMoveWhenRowDragging) {\n            api.setSuppressMoveWhenRowDragging(ComponentUtil.toBoolean(changes.suppressMoveWhenRowDragging.currentValue));\n        }\n\n        if (changes.suppressRowClickSelection) {\n            api.setSuppressRowClickSelection(ComponentUtil.toBoolean(changes.suppressRowClickSelection.currentValue));\n        }\n\n        if (changes.suppressClipboardPaste) {\n            api.setSuppressClipboardPaste(ComponentUtil.toBoolean(changes.suppressClipboardPaste.currentValue));\n        }\n\n        if (changes.sideBar) {\n            api.setSideBar(changes.sideBar.currentValue);\n        }\n\n        // copy changes into an event for dispatch\n        const event: ComponentStateChangedEvent = {\n            type: Events.EVENT_COMPONENT_STATE_CHANGED,\n            api: gridOptions.api,\n            columnApi: gridOptions.columnApi\n        };\n\n        iterateObject(changes, (key: string, value: any) => {\n            (event as any)[key] = value;\n        });\n\n        api.dispatchEvent(event);\n    }\n\n    public static toBoolean(value: any): boolean {\n        if (typeof value === 'boolean') {\n            return value;\n        } else if (typeof value === 'string') {\n            // for boolean, compare to empty String to allow attributes appearing with\n            // no value to be treated as 'true'\n            return value.toUpperCase() === 'TRUE' || value == '';\n        } else {\n            return false;\n        }\n    }\n\n    public static toNumber(value: any): number {\n        if (typeof value === 'number') {\n            return value;\n        } else if (typeof value === 'string') {\n            return Number(value);\n        } else {\n            return undefined;\n        }\n    }\n}\n\nComponentUtil.EVENTS = values<any>(Events);\n"]}