{"version":3,"sources":["../../src/ts/focusController.ts"],"names":[],"mappings":"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","file":"focusController.js","sourcesContent":["import { Bean, Autowired, PostConstruct, Optional } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Column } from \"./entities/column\";\nimport { CellFocusedEvent, Events } from \"./events\";\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { ColumnApi } from \"./columnController/columnApi\";\nimport { ColumnController } from \"./columnController/columnController\";\nimport { CellPosition } from \"./entities/cellPosition\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { GridApi } from \"./gridApi\";\nimport { CellComp } from \"./rendering/cellComp\";\nimport { HeaderRowComp } from \"./headerRendering/headerRowComp\";\nimport { AbstractHeaderWrapper } from \"./headerRendering/header/abstractHeaderWrapper\";\nimport { HeaderPosition } from \"./headerRendering/header/headerPosition\";\nimport { RowPositionUtils } from \"./entities/rowPosition\";\nimport { IRangeController } from \"./interfaces/iRangeController\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { HeaderNavigationService } from \"./headerRendering/header/headerNavigationService\";\nimport { ColumnGroup } from \"./entities/columnGroup\";\nimport { ManagedFocusComponent } from \"./widgets/managedFocusComponent\";\nimport { GridCore } from \"./gridCore\";\nimport { getTabIndex } from './utils/browser';\nimport { findIndex, last } from './utils/array';\nimport { makeNull } from './utils/generic';\n\n@Bean('focusController')\nexport class FocusController extends BeanStub {\n\n    @Autowired('gridOptionsWrapper') private readonly gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('columnController') private readonly columnController: ColumnController;\n    @Autowired('headerNavigationService') private readonly headerNavigationService: HeaderNavigationService;\n    @Autowired('columnApi') private readonly columnApi: ColumnApi;\n    @Autowired('gridApi') private readonly gridApi: GridApi;\n    @Autowired('rowRenderer') private readonly rowRenderer: RowRenderer;\n    @Autowired('rowPositionUtils') private readonly rowPositionUtils: RowPositionUtils;\n    @Optional('rangeController') private readonly rangeController: IRangeController;\n\n    private static FOCUSABLE_SELECTOR = '[tabindex], input, select, button, textarea';\n    private static FOCUSABLE_EXCLUDE = '.ag-hidden, .ag-hidden *, .ag-disabled, .ag-disabled *';\n\n    private gridCore: GridCore;\n    private focusedCellPosition: CellPosition;\n    private focusedHeaderPosition: HeaderPosition;\n    private keyboardFocusActive: boolean = false;\n\n    @PostConstruct\n    private init(): void {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n\n        const clearFocusedCellListener = this.clearFocusedCell.bind(this);\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverythingChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);\n\n        this.addManagedListener(eDocument, 'keydown', this.activateKeyboardMode.bind(this));\n        this.addManagedListener(eDocument, 'mousedown', this.activateMouseMode.bind(this));\n    }\n\n    public registerGridCore(gridCore: GridCore): void {\n        this.gridCore = gridCore;\n    }\n\n    public onColumnEverythingChanged(): void {\n        // if the columns change, check and see if this column still exists. if it does,\n        // then we can keep the focused cell. if it doesn't, then we need to drop the focused\n        // cell.\n        if (this.focusedCellPosition) {\n            const col = this.focusedCellPosition.column;\n            const colFromColumnController = this.columnController.getGridColumn(col.getId());\n\n            if (col !== colFromColumnController) {\n                this.clearFocusedCell();\n            }\n        }\n    }\n\n    public isKeyboardFocus(): boolean {\n        return this.keyboardFocusActive;\n    }\n\n    private activateMouseMode(): void {\n        if (!this.keyboardFocusActive) { return; }\n\n        this.keyboardFocusActive = false;\n        this.eventService.dispatchEvent({ type: Events.EVENT_MOUSE_FOCUS });\n    }\n\n    private activateKeyboardMode(): void {\n        if (this.keyboardFocusActive) { return; }\n\n        this.keyboardFocusActive = true;\n        this.eventService.dispatchEvent({ type: Events.EVENT_KEYBOARD_FOCUS });\n    }\n\n    // we check if the browser is focusing something, and if it is, and\n    // it's the cell we think is focused, then return the cell. so this\n    // methods returns the cell if a) we think it has focus and b) the\n    // browser thinks it has focus. this then returns nothing if we\n    // first focus a cell, then second click outside the grid, as then the\n    // grid cell will still be focused as far as the grid is concerned,\n    // however the browser focus will have moved somewhere else.\n    public getFocusCellToUseAfterRefresh(): CellPosition {\n        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedCellPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about\n        if (!this.getGridCellForDomElement(document.activeElement)) {\n            return null;\n        }\n\n        return this.focusedCellPosition;\n    }\n\n    private getGridCellForDomElement(eBrowserCell: Node): CellPosition {\n        let ePointer = eBrowserCell;\n\n        while (ePointer) {\n            const cellComp = this.gridOptionsWrapper.getDomData(ePointer, CellComp.DOM_DATA_KEY_CELL_COMP) as CellComp;\n\n            if (cellComp) {\n                return cellComp.getCellPosition();\n            }\n\n            ePointer = ePointer.parentNode;\n        }\n\n        return null;\n    }\n\n    public clearFocusedCell(): void {\n        this.focusedCellPosition = null;\n        this.onCellFocused(false);\n    }\n\n    public getFocusedCell(): CellPosition {\n        return this.focusedCellPosition;\n    }\n\n    public setFocusedCell(rowIndex: number, colKey: string | Column, floating: string | undefined, forceBrowserFocus = false): void {\n        const gridColumn = this.columnController.getGridColumn(colKey);\n\n        // if column doesn't exist, then blank the focused cell and return. this can happen when user sets new columns,\n        // and the focused cell is in a column that no longer exists. after columns change, the grid refreshes and tries\n        // to re-focus the focused cell.\n        if (!gridColumn) {\n            this.focusedCellPosition = null;\n            return;\n        }\n\n        this.focusedCellPosition = { rowIndex, rowPinned: makeNull(floating), column: makeNull(gridColumn) };\n        this.onCellFocused(forceBrowserFocus);\n    }\n\n    public isCellFocused(cellPosition: CellPosition): boolean {\n        if (this.focusedCellPosition == null) { return false; }\n\n        return this.focusedCellPosition.column === cellPosition.column &&\n            this.isRowFocused(cellPosition.rowIndex, cellPosition.rowPinned);\n    }\n\n    public isRowNodeFocused(rowNode: RowNode): boolean {\n        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);\n    }\n\n    public isHeaderWrapperFocused(headerWrapper: AbstractHeaderWrapper): boolean {\n        if (this.focusedHeaderPosition == null) { return false; }\n\n        const column = headerWrapper.getColumn();\n        const headerRowIndex = (headerWrapper.getParentComponent() as HeaderRowComp).getRowIndex();\n        const pinned = headerWrapper.getPinned();\n\n        const { column: focusedColumn, headerRowIndex: focusedHeaderRowIndex } = this.focusedHeaderPosition;\n\n        return column === focusedColumn &&\n            headerRowIndex === focusedHeaderRowIndex &&\n            pinned == focusedColumn.getPinned();\n    }\n\n    public clearFocusedHeader(): void {\n        this.focusedHeaderPosition = null;\n    }\n\n    public getFocusedHeader(): HeaderPosition {\n        return this.focusedHeaderPosition;\n    }\n\n    public setFocusedHeader(headerRowIndex: number, column: ColumnGroup | Column): void {\n        this.focusedHeaderPosition = { headerRowIndex, column };\n    }\n\n    public focusHeaderPosition(\n        headerPosition: HeaderPosition,\n        direction: 'Before' | 'After' = null,\n        fromTab: boolean = false,\n        allowUserOverride: boolean = false,\n        event?: KeyboardEvent\n    ): boolean {\n        if (allowUserOverride) {\n            const { gridOptionsWrapper } = this;\n            const currentPosition = this.getFocusedHeader();\n            const headerRowCount = this.headerNavigationService.getHeaderRowCount();\n\n            if (fromTab) {\n                const userFunc = gridOptionsWrapper.getTabToNextHeaderFunc();\n                if (userFunc) {\n                    const params = {\n                        backwards: direction === 'Before',\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount\n                    };\n                    headerPosition = userFunc(params);\n                }\n            } else {\n                const userFunc = gridOptionsWrapper.getNavigateToNextHeaderFunc();\n                if (userFunc) {\n                    const params = {\n                        key: event.key,\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount,\n                        event\n                    };\n                    headerPosition = userFunc(params);\n                }\n            }\n        }\n\n        if (!headerPosition) { return false; }\n\n        if (headerPosition.headerRowIndex === -1) {\n            return this.focusGridView(headerPosition.column as Column);\n        }\n\n        this.headerNavigationService.scrollToColumn(headerPosition.column, direction);\n\n        const childContainer = this.headerNavigationService.getHeaderContainer(headerPosition.column.getPinned());\n        const rowComps = childContainer.getRowComps();\n        const nextRowComp = rowComps[headerPosition.headerRowIndex];\n        const headerComps = nextRowComp.getHeaderComps();\n        const nextHeader = headerComps[headerPosition.column.getUniqueId() as string];\n\n        if (nextHeader) {\n            // this will automatically call the setFocusedHeader method above\n            nextHeader.getFocusableElement().focus();\n            return true;\n        }\n\n        return false;\n    }\n\n    public isAnyCellFocused(): boolean {\n        return !!this.focusedCellPosition;\n    }\n\n    public isRowFocused(rowIndex: number, floating: string): boolean {\n        if (this.focusedCellPosition == null) { return false; }\n\n        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);\n    }\n\n    public findFocusableElements(rootNode: HTMLElement, exclude?: string, onlyUnmanaged = false): HTMLElement[] {\n        const focusableString = FocusController.FOCUSABLE_SELECTOR;\n        let excludeString = FocusController.FOCUSABLE_EXCLUDE;\n\n        if (exclude) {\n            excludeString += ', ' + exclude;\n        }\n\n        if (onlyUnmanaged) {\n            excludeString += ', [tabindex=\"-1\"]';\n        }\n\n        const nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString)) as HTMLElement[];\n        const excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString)) as HTMLElement[];\n\n        if (!excludeNodes.length) {\n            return nodes;\n        }\n\n        const diff = (a: HTMLElement[], b: HTMLElement[]) => a.filter(element => b.indexOf(element) === -1);\n        return diff(nodes, excludeNodes);\n    }\n\n    public focusInto(rootNode: HTMLElement, up = false, onlyUnmanaged = false): boolean {\n        const focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);\n        const toFocus = up ? last(focusableElements) : focusableElements[0];\n\n        if (toFocus) {\n            toFocus.focus();\n            return true;\n        }\n\n        return false;\n    }\n\n    public findNextFocusableElement(rootNode: HTMLElement, onlyManaged?: boolean, backwards?: boolean): HTMLElement {\n        const focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex=\"-1\"])' : null);\n        let currentIndex: number;\n\n        if (onlyManaged) {\n            currentIndex = findIndex(focusable, el => el.contains(document.activeElement));\n        } else {\n            currentIndex = focusable.indexOf(document.activeElement as HTMLElement);\n        }\n\n        const nextIndex = currentIndex + (backwards ? -1 : 1);\n\n        if (nextIndex < 0 || nextIndex >= focusable.length) {\n            return null;\n        }\n\n        return focusable[nextIndex];\n    }\n\n    public isFocusUnderManagedComponent(rootNode: HTMLElement): boolean {\n        const managedContainers = rootNode.querySelectorAll(`.${ManagedFocusComponent.FOCUS_MANAGED_CLASS}`);\n\n        if (!managedContainers.length) { return false; }\n\n        for (let i = 0; i < managedContainers.length; i++) {\n            if (managedContainers[i].contains(document.activeElement)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public findTabbableParent(node: HTMLElement, limit: number = 5): HTMLElement {\n        let counter = 0;\n\n        while (node && getTabIndex(node) === null && ++counter <= limit) {\n            node = node.parentElement;\n        }\n\n        if (getTabIndex(node) === null) { return null; }\n\n        return node;\n    }\n\n    private onCellFocused(forceBrowserFocus: boolean): void {\n        const event: CellFocusedEvent = {\n            type: Events.EVENT_CELL_FOCUSED,\n            forceBrowserFocus: forceBrowserFocus,\n            rowIndex: null as number,\n            column: null as Column,\n            floating: null as string,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            rowPinned: null as string\n        };\n\n        if (this.focusedCellPosition) {\n            event.rowIndex = this.focusedCellPosition.rowIndex;\n            event.column = this.focusedCellPosition.column;\n            event.rowPinned = this.focusedCellPosition.rowPinned;\n        }\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public focusGridView(column?: Column, backwards?: boolean): boolean {\n        const nextRow = backwards\n            ? this.rowPositionUtils.getLastRow()\n            : this.rowPositionUtils.getFirstRow();\n\n        if (!nextRow) { return false; }\n\n        const { rowIndex, rowPinned } = nextRow;\n        const focusedHeader = this.getFocusedHeader();\n\n        if (!column) {\n            column = focusedHeader.column as Column;\n        }\n\n        if (rowIndex == null) { return false; }\n\n        this.rowRenderer.ensureCellVisible({ rowIndex, column, rowPinned });\n\n        this.setFocusedCell(rowIndex, column, makeNull(rowPinned), true);\n\n        if (this.rangeController) {\n            const cellPosition = { rowIndex, rowPinned, column };\n            this.rangeController.setRangeToCell(cellPosition);\n        }\n\n        return true;\n    }\n\n    public focusNextGridCoreContainer(backwards: boolean): boolean {\n        if (this.gridCore.focusNextInnerContainer(backwards)) {\n            return true;\n        }\n\n        if (!backwards) {\n            this.gridCore.forceFocusOutOfContainer();\n        }\n    }\n}\n"]}