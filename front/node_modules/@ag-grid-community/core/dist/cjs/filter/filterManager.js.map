{"version":3,"sources":["../../src/ts/filter/filterManager.ts"],"names":[],"mappings":"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","file":"filterManager.js","sourcesContent":["import { Promise } from '../utils';\nimport { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { ValueService } from '../valueService/valueService';\nimport { ColumnController } from '../columnController/columnController';\nimport { ColumnApi } from '../columnController/columnApi';\nimport { RowNode } from '../entities/rowNode';\nimport { Column } from '../entities/column';\nimport { Autowired, Bean, PostConstruct, PreDestroy } from '../context/context';\nimport { IRowModel } from '../interfaces/iRowModel';\nimport { ColumnEventType, Events, FilterChangedEvent, FilterModifiedEvent, FilterOpenedEvent } from '../events';\nimport { IFilterComp, IFilterParams } from '../interfaces/iFilter';\nimport { ColDef, GetQuickFilterTextParams } from '../entities/colDef';\nimport { GridApi } from '../gridApi';\nimport { UserComponentFactory } from '../components/framework/userComponentFactory';\nimport { ModuleNames } from '../modules/moduleNames';\nimport { ModuleRegistry } from '../modules/moduleRegistry';\nimport { forEach, some, every } from '../utils/array';\nimport { BeanStub } from '../context/beanStub';\nimport { convertToSet } from '../utils/set';\nimport { exists } from '../utils/generic';\nimport { mergeDeep, cloneObject } from '../utils/object';\nimport { loadTemplate } from '../utils/dom';\n\nexport type FilterRequestSource = 'COLUMN_MENU' | 'TOOLBAR' | 'NO_UI';\n\n@Bean('filterManager')\nexport class FilterManager extends BeanStub {\n\n    @Autowired('$compile') private $compile: any;\n    @Autowired('$scope') private $scope: any;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    public static QUICK_FILTER_SEPARATOR = '\\n';\n\n    private allAdvancedFilters = new Map<string, FilterWrapper>();\n    private activeAdvancedFilters: IFilterComp[] = [];\n    private quickFilter: string = null;\n    private quickFilterParts: string[] = null;\n    private externalFilterPresent: boolean;\n\n    // this is true when the grid is processing the filter change. this is used by the cell comps, so that they\n    // don't flash when data changes due to filter changes. there is no need to flash when filter changes as the\n    // user is in control, so doesn't make sense to show flashing changes. for example, go to main demo where\n    // this feature is turned off (hack code to always return false for isSuppressFlashingCellsBecauseFiltering(), put in)\n    // 100,000 rows and group by country. then do some filtering. all the cells flash, which is silly.\n    private processingFilterChange = false;\n    private allowShowChangeAfterFilter: boolean;\n\n    @PostConstruct\n    public init(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));\n\n        this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());\n        this.setQuickFilterParts();\n\n        this.allowShowChangeAfterFilter = this.gridOptionsWrapper.isAllowShowChangeAfterFilter();\n\n        // check this here, in case there is a filter from the start\n        this.checkExternalFilter();\n    }\n\n    private setQuickFilterParts(): void {\n        this.quickFilterParts = this.quickFilter ? this.quickFilter.split(' ') : null;\n    }\n\n    public setFilterModel(model: { [key: string]: any; }): void {\n        const allPromises: Promise<void>[] = [];\n\n        if (model) {\n            // mark the filters as we set them, so any active filters left over we stop\n            const modelKeys = convertToSet(Object.keys(model));\n\n            this.allAdvancedFilters.forEach((filterWrapper, colId) => {\n                const newModel = model[colId];\n\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel));\n                modelKeys.delete(colId);\n            });\n\n            // at this point, processedFields contains data for which we don't have a filter working yet\n            modelKeys.forEach(colId => {\n                const column = this.columnController.getPrimaryColumn(colId);\n\n                if (!column) {\n                    console.warn('Warning ag-grid setFilterModel - no column found for colId ' + colId);\n                    return;\n                }\n\n                const filterWrapper = this.getOrCreateFilterWrapper(column, 'NO_UI');\n\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]));\n            });\n        } else {\n            this.allAdvancedFilters.forEach(filterWrapper => {\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise, null));\n            });\n        }\n\n        Promise.all(allPromises).then(() => this.onFilterChanged());\n    }\n\n    private setModelOnFilterWrapper(filterPromise: Promise<IFilterComp>, newModel: any): Promise<void> {\n        return new Promise<void>(resolve => {\n            filterPromise.then(filter => {\n                if (typeof filter.setModel !== 'function') {\n                    console.warn('Warning ag-grid - filter missing setModel method, which is needed for setFilterModel');\n                    resolve();\n                }\n\n                (filter.setModel(newModel) || Promise.resolve()).then(() => resolve());\n            });\n        });\n    }\n\n    public getFilterModel(): { [key: string]: any; } {\n        const result: { [key: string]: any; } = {};\n\n        this.allAdvancedFilters.forEach((filterWrapper, key) => {\n            // because user can provide filters, we provide useful error checking and messages\n            const filterPromise = filterWrapper.filterPromise;\n            const filter = filterPromise.resolveNow(null, filter => filter);\n\n            if (filter == null) { return null; }\n\n            if (typeof filter.getModel !== 'function') {\n                console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');\n                return;\n            }\n\n            const model = filter.getModel();\n\n            if (exists(model)) {\n                result[key] = model;\n            }\n        });\n\n        return result;\n    }\n\n    // returns true if any advanced filter (ie not quick filter) active\n    public isAdvancedFilterPresent(): boolean {\n        return this.activeAdvancedFilters.length > 0;\n    }\n\n    // called by:\n    // 1) onFilterChanged()\n    // 2) onNewRowsLoaded()\n    private updateActiveFilters(): void {\n        this.activeAdvancedFilters.length = 0;\n\n        this.allAdvancedFilters.forEach(filterWrapper => {\n            if (filterWrapper.filterPromise.resolveNow(false, filter => filter.isFilterActive())) {\n                this.activeAdvancedFilters.push(filterWrapper.filterPromise.resolveNow(null, filter => filter));\n            }\n        });\n    }\n\n    private updateFilterFlagInColumns(source: ColumnEventType, additionalEventAttributes?: any): void {\n        this.allAdvancedFilters.forEach(filterWrapper => {\n            const isFilterActive = filterWrapper.filterPromise.resolveNow(false, filter => filter.isFilterActive());\n\n            filterWrapper.column.setFilterActive(isFilterActive, source, additionalEventAttributes);\n        });\n    }\n\n    public isAnyFilterPresent(): boolean {\n        return this.isQuickFilterPresent() || this.isAdvancedFilterPresent() || this.externalFilterPresent;\n    }\n\n    private doAdvancedFiltersPass(node: RowNode, filterToSkip?: IFilterComp): boolean {\n        const { data } = node;\n\n        for (let i = 0; i < this.activeAdvancedFilters.length; i++) {\n            const filter = this.activeAdvancedFilters[i];\n\n            if (filter == null || filter === filterToSkip) { continue; }\n\n            if (typeof filter.doesFilterPass !== 'function') {\n                // because users can do custom filters, give nice error message\n                throw new Error('Filter is missing method doesFilterPass');\n            }\n\n            if (!filter.doesFilterPass({ node, data })) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private parseQuickFilter(newFilter: string): string {\n        if (!exists(newFilter)) {\n            return null;\n        }\n\n        if (!this.gridOptionsWrapper.isRowModelDefault()) {\n            console.warn('ag-grid: quick filtering only works with the Client-Side Row Model');\n            return null;\n        }\n\n        return newFilter.toUpperCase();\n    }\n\n    public setQuickFilter(newFilter: any): void {\n        const parsedFilter = this.parseQuickFilter(newFilter);\n\n        if (this.quickFilter !== parsedFilter) {\n            this.quickFilter = parsedFilter;\n            this.setQuickFilterParts();\n            this.onFilterChanged();\n        }\n    }\n\n    private checkExternalFilter(): void {\n        this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();\n    }\n\n    public onFilterChanged(filterInstance?: IFilterComp, additionalEventAttributes?: any): void {\n        this.updateActiveFilters();\n        this.updateFilterFlagInColumns('filterChanged', additionalEventAttributes);\n        this.checkExternalFilter();\n\n        this.allAdvancedFilters.forEach(filterWrapper => {\n            filterWrapper.filterPromise.then(filter => {\n                if (filter !== filterInstance && filter.onAnyFilterChanged) {\n                    filter.onAnyFilterChanged();\n                }\n            });\n        });\n\n        const filterChangedEvent: FilterChangedEvent = {\n            type: Events.EVENT_FILTER_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n\n        if (additionalEventAttributes) {\n            mergeDeep(filterChangedEvent, additionalEventAttributes);\n        }\n\n        // because internal events are not async in ag-grid, when the dispatchEvent\n        // method comes back, we know all listeners have finished executing.\n        this.processingFilterChange = true;\n\n        this.eventService.dispatchEvent(filterChangedEvent);\n\n        this.processingFilterChange = false;\n    }\n\n    public isSuppressFlashingCellsBecauseFiltering(): boolean {\n        // if user has elected to always flash cell changes, then always return false, otherwise we suppress flashing\n        // changes when filtering\n        return !this.allowShowChangeAfterFilter && this.processingFilterChange;\n    }\n\n    public isQuickFilterPresent(): boolean {\n        return this.quickFilter !== null;\n    }\n\n    public doesRowPassOtherFilters(filterToSkip: IFilterComp, node: any): boolean {\n        return this.doesRowPassFilter(node, filterToSkip);\n    }\n\n    private doesRowPassQuickFilterNoCache(node: RowNode, filterPart: string): boolean {\n        const columns = this.columnController.getAllColumnsForQuickFilter();\n\n        return some(columns, column => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n\n            return exists(part) && part.indexOf(filterPart) >= 0;\n        });\n    }\n\n    private doesRowPassQuickFilterCache(node: RowNode, filterPart: string): boolean {\n        if (!node.quickFilterAggregateText) {\n            this.aggregateRowForQuickFilter(node);\n        }\n\n        return node.quickFilterAggregateText.indexOf(filterPart) >= 0;\n    }\n\n    private doesRowPassQuickFilter(node: RowNode): boolean {\n        const usingCache = this.gridOptionsWrapper.isCacheQuickFilter();\n\n        // each part must pass, if any fails, then the whole filter fails\n        return every(this.quickFilterParts, part =>\n            usingCache ? this.doesRowPassQuickFilterCache(node, part) : this.doesRowPassQuickFilterNoCache(node, part)\n        );\n    }\n\n    public doesRowPassFilter(node: any, filterToSkip?: IFilterComp): boolean {\n        // the row must pass ALL of the filters, so if any of them fail,\n        // we return true. that means if a row passes the quick filter,\n        // but fails the column filter, it fails overall\n\n        // first up, check quick filter\n        if (this.isQuickFilterPresent() && !this.doesRowPassQuickFilter(node)) {\n            return false;\n        }\n\n        // secondly, give the client a chance to reject this row\n        if (this.externalFilterPresent && !this.gridOptionsWrapper.doesExternalFilterPass(node)) {\n            return false;\n        }\n\n        // lastly, check our internal advanced filter\n        if (this.isAdvancedFilterPresent() && !this.doAdvancedFiltersPass(node, filterToSkip)) {\n            return false;\n        }\n\n        // got this far, all filters pass\n        return true;\n    }\n\n    private getQuickFilterTextForColumn(column: Column, node: RowNode): string {\n        let value = this.valueService.getValue(column, node, true);\n        const colDef = column.getColDef();\n\n        if (colDef.getQuickFilterText) {\n            const params: GetQuickFilterTextParams = {\n                value,\n                node,\n                data: node.data,\n                column,\n                colDef,\n                context: this.gridOptionsWrapper.getContext()\n            };\n\n            value = colDef.getQuickFilterText(params);\n        }\n\n        return exists(value) ? value.toString().toUpperCase() : null;\n    }\n\n    private aggregateRowForQuickFilter(node: RowNode): void {\n        const stringParts: string[] = [];\n        const columns = this.columnController.getAllColumnsForQuickFilter();\n\n        forEach(columns, column => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n\n            if (exists(part)) {\n                stringParts.push(part);\n            }\n        });\n\n        node.quickFilterAggregateText = stringParts.join(FilterManager.QUICK_FILTER_SEPARATOR);\n    }\n\n    private onNewRowsLoaded(source: ColumnEventType): void {\n        this.allAdvancedFilters.forEach(filterWrapper => {\n            filterWrapper.filterPromise.then(filter => {\n                if (filter.onNewRowsLoaded) {\n                    filter.onNewRowsLoaded();\n                }\n            });\n        });\n\n        this.updateFilterFlagInColumns(source);\n        this.updateActiveFilters();\n    }\n\n    private createValueGetter(column: Column): (node: RowNode) => any {\n        return node => this.valueService.getValue(column, node, true);\n    }\n\n    public getFilterComponent(column: Column, source: FilterRequestSource, createIfDoesNotExist = true): Promise<IFilterComp> {\n        if (createIfDoesNotExist) {\n            return this.getOrCreateFilterWrapper(column, source).filterPromise;\n        }\n\n        const filterWrapper = this.cachedFilter(column);\n\n        return filterWrapper ? filterWrapper.filterPromise : null;\n    }\n\n    public isFilterActive(column: Column): boolean {\n        const filterWrapper = this.cachedFilter(column);\n\n        return filterWrapper && filterWrapper.filterPromise.resolveNow(false, filter => filter.isFilterActive());\n    }\n\n    public getOrCreateFilterWrapper(column: Column, source: FilterRequestSource): FilterWrapper {\n        let filterWrapper = this.cachedFilter(column);\n\n        if (!filterWrapper) {\n            filterWrapper = this.createFilterWrapper(column, source);\n            this.allAdvancedFilters.set(column.getColId(), filterWrapper);\n        } else if (source !== 'NO_UI') {\n            this.putIntoGui(filterWrapper, source);\n        }\n\n        return filterWrapper;\n    }\n\n    public cachedFilter(column: Column): FilterWrapper {\n        return this.allAdvancedFilters.get(column.getColId());\n    }\n\n    private createFilterInstance(column: Column, $scope: any): Promise<IFilterComp> {\n        const defaultFilter =\n            ModuleRegistry.isRegistered(ModuleNames.SetFilterModule) ? 'agSetColumnFilter' : 'agTextColumnFilter';\n\n        const colDef = column.getColDef();\n\n        let filterInstance: IFilterComp;\n\n        const params: IFilterParams = {\n            ...this.createFilterParams(column, colDef, $scope),\n            filterModifiedCallback: () => {\n                const event: FilterModifiedEvent = {\n                    type: Events.EVENT_FILTER_MODIFIED,\n                    api: this.gridApi,\n                    columnApi: this.columnApi,\n                    column,\n                    filterInstance\n                };\n\n                this.eventService.dispatchEvent(event);\n            },\n            filterChangedCallback: (additionalEventAttributes?: any) =>\n                this.onFilterChanged(filterInstance, additionalEventAttributes),\n            doesRowPassOtherFilter: node => this.doesRowPassOtherFilters(filterInstance, node),\n        };\n\n        const res = this.userComponentFactory.newFilterComponent(colDef, params, defaultFilter);\n\n        if (res) {\n            res.then(r => filterInstance = r);\n        }\n\n        return res;\n    }\n\n    public createFilterParams(column: Column, colDef: ColDef, $scope: any = null): IFilterParams {\n        const params: IFilterParams = {\n            api: this.gridOptionsWrapper.getApi(),\n            column,\n            colDef: cloneObject(colDef),\n            rowModel: this.rowModel,\n            filterChangedCallback: null,\n            filterModifiedCallback: null,\n            valueGetter: this.createValueGetter(column),\n            context: this.gridOptionsWrapper.getContext(),\n            doesRowPassOtherFilter: null\n        };\n\n        // hack in scope if using AngularJS\n        if ($scope) {\n            (params as any).$scope = $scope;\n        }\n\n        return params;\n    }\n\n    private createFilterWrapper(column: Column, source: FilterRequestSource): FilterWrapper {\n        const filterWrapper: FilterWrapper = {\n            column: column,\n            filterPromise: null,\n            scope: null as any,\n            compiledElement: null,\n            guiPromise: Promise.resolve(null)\n        };\n\n        filterWrapper.scope = this.gridOptionsWrapper.isAngularCompileFilters() ? this.$scope.$new() : null;\n        filterWrapper.filterPromise = this.createFilterInstance(column, filterWrapper.scope);\n\n        if (filterWrapper.filterPromise) {\n            this.putIntoGui(filterWrapper, source);\n        }\n\n        return filterWrapper;\n    }\n\n    private putIntoGui(filterWrapper: FilterWrapper, source: FilterRequestSource): void {\n        const eFilterGui = document.createElement('div');\n\n        eFilterGui.className = 'ag-filter';\n\n        filterWrapper.guiPromise = new Promise<HTMLElement>(resolve => {\n            filterWrapper.filterPromise.then(filter => {\n                let guiFromFilter = filter.getGui();\n\n                if (!exists(guiFromFilter)) {\n                    console.warn(`getGui method from filter returned ${guiFromFilter}, it should be a DOM element or an HTML template string.`);\n                }\n\n                // for backwards compatibility with Angular 1 - we\n                // used to allow providing back HTML from getGui().\n                // once we move away from supporting Angular 1\n                // directly, we can change this.\n                if (typeof guiFromFilter === 'string') {\n                    guiFromFilter = loadTemplate(guiFromFilter as string);\n                }\n\n                eFilterGui.appendChild(guiFromFilter);\n\n                if (filterWrapper.scope) {\n                    const compiledElement = this.$compile(eFilterGui)(filterWrapper.scope);\n                    filterWrapper.compiledElement = compiledElement;\n                    window.setTimeout(() => filterWrapper.scope.$apply(), 0);\n                }\n\n                resolve(eFilterGui);\n\n                this.eventService.dispatchEvent({\n                    type: Events.EVENT_FILTER_OPENED,\n                    column: filterWrapper.column,\n                    source,\n                    eGui: eFilterGui,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                } as FilterOpenedEvent);\n            });\n        });\n    }\n\n    private onNewColumnsLoaded(): void {\n        let atLeastOneFilterGone = false;\n\n        this.allAdvancedFilters.forEach(filterWrapper => {\n            const oldColumn = !this.columnController.getPrimaryColumn(filterWrapper.column);\n\n            if (oldColumn) {\n                atLeastOneFilterGone = true;\n                this.disposeFilterWrapper(filterWrapper, 'filterDestroyed');\n            }\n        });\n\n        if (atLeastOneFilterGone) {\n            this.onFilterChanged();\n        }\n    }\n\n    // destroys the filter, so it not longer takes part\n    public destroyFilter(column: Column, source: ColumnEventType = 'api'): void {\n        const filterWrapper = this.allAdvancedFilters.get(column.getColId());\n\n        if (filterWrapper) {\n            this.disposeFilterWrapper(filterWrapper, source);\n            this.onFilterChanged();\n        }\n    }\n\n    private disposeFilterWrapper(filterWrapper: FilterWrapper, source: ColumnEventType): void {\n        filterWrapper.filterPromise.then(filter => {\n            (filter.setModel(null) || Promise.resolve()).then(() => {\n                this.getContext().destroyBean(filter);\n\n                filterWrapper.column.setFilterActive(false, source);\n\n                if (filterWrapper.scope) {\n                    if (filterWrapper.compiledElement) {\n                        filterWrapper.compiledElement.remove();\n                    }\n\n                    filterWrapper.scope.$destroy();\n                }\n\n                this.allAdvancedFilters.delete(filterWrapper.column.getColId());\n            });\n        });\n    }\n\n    @PreDestroy\n    protected destroy() {\n        super.destroy();\n        this.allAdvancedFilters.forEach(filterWrapper => this.disposeFilterWrapper(filterWrapper, 'filterDestroyed'));\n    }\n}\n\nexport interface FilterWrapper {\n    compiledElement: any;\n    column: Column;\n    filterPromise: Promise<IFilterComp>;\n    scope: any;\n    guiPromise: Promise<HTMLElement>;\n}\n"]}